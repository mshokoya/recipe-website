{"ast":null,"code":"var _jsxFileName = \"/Users/michaelshokoya/Documents/code/node/recipe-website/src/components/RecipesList/index.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport _ from 'lodash';\nimport { useQuery } from '@apollo/react-hooks';\nimport { recipesGraphQL } from '../../graphql/queries/recipies';\nimport { userLikesGraphQL } from '../../graphql/queries/userLikes';\nimport { Row } from 'antd';\nimport { Error } from '../Notify';\nexport let queryEnum;\n\n(function (queryEnum) {\n  queryEnum[\"userLikes\"] = \"userLikes\";\n  queryEnum[\"recipes\"] = \"recipes\";\n})(queryEnum || (queryEnum = {}));\n\nexport const RecipesList = ({\n  options,\n  parentRoute,\n  queryType\n}) => {\n  const query = queryType === queryEnum.recipes ? recipesGraphQL : userLikesGraphQL;\n  const {\n    data,\n    loading,\n    error\n  } = useQuery(query, options);\n\n  const parentArray = _.get(data, queryType);\n\n  const recipesList = _.map(parentArray, value => _.get(value, 'recipe', value));\n\n  if (loading) return __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 23\n    }\n  }, \"Loading\"); // if (recipesList.length === 0 ) return <p>Warning</p>\n  // if (error || !recipesList) return <Error errorText={`${error}`} />\n\n  if (recipesList.length === 0) return __jsx(Error, {\n    errorText: `${error}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 40\n    }\n  });\n  return __jsx(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 5\n    }\n  }, recipesList.map(recipe => __jsx(\"p\", {\n    key: recipe.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 9\n    }\n  }, recipe.title)));\n};","map":{"version":3,"sources":["/Users/michaelshokoya/Documents/code/node/recipe-website/src/components/RecipesList/index.tsx"],"names":["_","useQuery","recipesGraphQL","userLikesGraphQL","Row","Error","queryEnum","RecipesList","options","parentRoute","queryType","query","recipes","data","loading","error","parentArray","get","recipesList","map","value","length","recipe","id","title"],"mappings":";;;AAAA,OAAOA,CAAP,MAAc,QAAd;AACA,SAA0BC,QAA1B,QAAyC,qBAAzC;AACA,SAAQC,cAAR,QAA6B,gCAA7B;AACA,SAAQC,gBAAR,QAA+B,iCAA/B;AACA,SAAQC,GAAR,QAAkB,MAAlB;AAEA,SAAQC,KAAR,QAAoB,WAApB;AAGA,WAAYC,SAAZ;;WAAYA,S;AAAAA,EAAAA,S;AAAAA,EAAAA,S;GAAAA,S,KAAAA,S;;AAWZ,OAAO,MAAMC,WAAW,GAAG,CAAC;AAC1BC,EAAAA,OAD0B;AAE1BC,EAAAA,WAF0B;AAG1BC,EAAAA;AAH0B,CAAD,KAIH;AACtB,QAAMC,KAAK,GACTD,SAAS,KAAKJ,SAAS,CAACM,OAAxB,GACIV,cADJ,GAEIC,gBAHN;AAKA,QAAM;AAACU,IAAAA,IAAD;AAAOC,IAAAA,OAAP;AAAgBC,IAAAA;AAAhB,MAAyBd,QAAQ,CAACU,KAAD,EAAQH,OAAR,CAAvC;;AAEA,QAAMQ,WAAW,GAAGhB,CAAC,CAACiB,GAAF,CAAMJ,IAAN,EAAYH,SAAZ,CAApB;;AACA,QAAMQ,WAAW,GAAGlB,CAAC,CAACmB,GAAF,CAAMH,WAAN,EAAmBI,KAAK,IAAIpB,CAAC,CAACiB,GAAF,CAAMG,KAAN,EAAa,QAAb,EAAuBA,KAAvB,CAA5B,CAApB;;AAEA,MAAIN,OAAJ,EAAa,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAP,CAXS,CAYtB;AACA;;AACA,MAAII,WAAW,CAACG,MAAZ,KAAuB,CAA3B,EAA8B,OAAO,MAAC,KAAD;AAAO,IAAA,SAAS,EAAG,GAAEN,KAAM,EAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAP;AAE9B,SACE,MAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGG,WAAW,CAACC,GAAZ,CAAiBG,MAAD,IACf;AAAG,IAAA,GAAG,EAAEA,MAAM,CAACC,EAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAoBD,MAAM,CAACE,KAA3B,CADD,CADH,CADF;AAOD,CA3BM","sourcesContent":["import _ from 'lodash';\nimport {QueryHookOptions, useQuery} from '@apollo/react-hooks';\nimport {recipesGraphQL} from '../../graphql/queries/recipies';\nimport {userLikesGraphQL} from '../../graphql/queries/userLikes';\nimport {Row} from 'antd';\nimport {Recipe} from '../../../generated/apollo-components';\nimport {Error} from '../Notify';\n\n\nexport enum queryEnum {\n  userLikes = 'userLikes',\n  recipes = 'recipes'\n}\n\ntype RecipesListProps = {\n  options?: QueryHookOptions;\n  parentRoute: string;\n  queryType: queryEnum;\n}\n\nexport const RecipesList = ({\n  options,\n  parentRoute,\n  queryType\n}: RecipesListProps) => {\n  const query = \n    queryType === queryEnum.recipes \n      ? recipesGraphQL \n      : userLikesGraphQL;\n\n  const {data, loading, error} = useQuery(query, options);\n\n  const parentArray = _.get(data, queryType);\n  const recipesList = _.map(parentArray, value => _.get(value, 'recipe', value));\n\n  if (loading) return <p>Loading</p>\n  // if (recipesList.length === 0 ) return <p>Warning</p>\n  // if (error || !recipesList) return <Error errorText={`${error}`} />\n  if (recipesList.length === 0) return <Error errorText={`${error}`} />\n\n  return (\n    <Row>\n      {recipesList.map((recipe: Recipe) => (\n        <p key={recipe.id}>{recipe.title}</p>\n      ))}\n    </Row>\n  )\n}"]},"metadata":{},"sourceType":"module"}